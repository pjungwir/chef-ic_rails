# Don't start watching until cap has deployed at least once:
if File.exists? '/var/www/<%= @app %>/current'
  <%= @sidekiq_processes %>.times do |i|
    app_root = "/var/www/<%= @app %>/current"
    cmd_prefix = "PATH=/usr/local/rbenv/shims:/usr/local/rbenv/bin:$PATH"

    God.watch do |w|
      w.name     = "<%= @app %>-sidekiq-#{i}"
      w.group    = '<%= @app %>-sidekiq'
      w.interval = 30.seconds
      w.log      = File.join(app_root, 'log', "#{w.name}.god.log")
      w.uid      = '<%= @app_user %>'
      w.gid      = '<%= @app_user %>'
      w.env      = { 'RAILS_ENV' => '<%= @env %>', 'HOME' => app_root }
      w.dir      = app_root
      w.pid_file = "#{app_root}/tmp/pids/#{w.name}.pid"
      w.start    = "cd '#{app_root}' && #{cmd_prefix} taskset -c #{i} bundle exec sidekiq --environment <%= @env %> --pidfile #{w.pid_file} --daemon --logfile #{w.log}"
      w.stop     = "cd '#{app_root}' && #{cmd_prefix} bundle exec ./bin/sidekiqctl stop #{w.pid_file}"

      # determine the state on startup
      w.transition(:init, { true => :up, false => :start }) do |on|
        on.condition(:process_running) do |c|
          c.running = true
        end
      end

      # determine when process has finished starting
      w.transition([:start, :restart], :up) do |on|
        on.condition(:process_running) do |c|
          c.running = true
          c.interval = 5.seconds
        end

        # failsafe
        on.condition(:tries) do |c|
          c.times = 5
          c.transition = :start
          c.interval = 5.seconds
        end
      end

      # start if process is not running
      w.transition(:up, :start) do |on|
        on.condition(:process_running) do |c|
          c.running = false
        end
      end
    end
  end
end

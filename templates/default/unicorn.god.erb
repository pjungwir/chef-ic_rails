# Don't start watching until cap has deployed at least once:
if File.exists? '/var/www/<%= @app %>/current'
  God.watch do |w|
    root_dir = "/var/www/<%= @app %>"
    current_dir = "#{root_dir}/current"
    shared_dir = "#{root_dir}/shared"
    log_dir = "#{shared_dir}/log"
    pids_dir = "#{shared_dir}/tmp/pids"
    cmd_prefix = "PATH=/usr/local/rbenv/shims:/usr/local/rbenv/bin:$PATH UNICORN_WORKERS=<%= @unicorn_workers %>"

    w.name = "<%= @app %>-unicorn"
    w.interval = 30.seconds # default
    w.log = "#{log_dir}/god-unicorn.log"
    w.pid_file = "#{pids_dir}/unicorn.pid"


    # Unicorn needs to be run from the rails root.
    w.start = "cd #{current_dir} && env #{cmd_prefix} bundle exec unicorn -D -E <%= @env %> -c #{current_dir}/config/unicorn.rb"

    # QUIT gracefully shuts down workers
    w.stop = "kill -QUIT `cat #{pids_dir}/unicorn.pid`"

    # USR2 causes the master to re-create itself and spawn a new worker pool
    w.restart = "kill -USR2 `cat #{pids_dir}/unicorn.pid`"

    w.start_grace = 10.seconds
    w.restart_grace = 10.seconds

    w.uid = '<%= @app_user %>'
    w.gid = '<%= @app_user %>'

    w.behavior(:clean_pid_file)

    w.start_if do |start|
      start.condition(:process_running) do |c|
        c.interval = 5.seconds
        c.running = false
      end
    end

    w.restart_if do |restart|
      restart.condition(:memory_usage) do |c|
        c.above = 300.megabytes
        c.times = [3, 5] # 3 out of 5 intervals
      end

      restart.condition(:cpu_usage) do |c|
        c.above = 50.percent
        c.times = 5
      end
    end

    # lifecycle
    w.lifecycle do |on|
      on.condition(:flapping) do |c|
        c.to_state = [:start, :restart]
        c.times = 5
        c.within = 5.minute
        c.transition = :unmonitored
        c.retry_in = 10.minutes
        c.retry_times = 5
        c.retry_within = 2.hours
      end
    end
  end
end
